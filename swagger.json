{
  "openapi": "3.0.0",
  "info": {
    "title": "GoalTracker API",
    "version": "1.0.0",
    "description": "REST API for goal tracking, daily quests, and progress logging."
  },
  "servers": [
    {
      "url": "{server}/api/v1",
      "description": "Environment-specific base URL. Change `{server}` to match your environment.",
      "variables": {
        "server": {
          "default": "http://localhost:8000"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Authentication & profile"
    },
    {
      "name": "Goals",
      "description": "Goal management"
    },
    {
      "name": "GoalTypes",
      "description": "Goal templates & field definitions"
    },
    {
      "name": "GoalProgress",
      "description": "Track and retrieve goal progress"
    },
    {
      "name": "DailyQuests",
      "description": "Habit-like nudges and their tracking"
    },
    {
      "name": "DailyQuestsSuggestions",
      "description": "Daily quests suggestions"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequest"
              },
              "examples": {
                "RegisterUserRequest": {
                  "$ref": "#/components/examples/RegisterUserRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserResponse"
                },
                "examples": {
                  "UserResponse": {
                    "$ref": "#/components/examples/RegisterUserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Log in with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "examples": {
                "LoginUserRequest": {
                  "$ref": "#/components/examples/LoginUserRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "examples": {
                  "LoginUserResponse": {
                    "$ref": "#/components/examples/LoginUserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/users/google-login": {
      "post": {
        "tags": ["Users"],
        "summary": "Login or register via Google",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleLoginRequest"
              },
              "examples": {
                "LoginUserRequest": {
                  "$ref": "#/components/examples/GoogleLoginRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "examples": {
                  "LoginUserResponse": {
                    "$ref": "#/components/examples/LoginUserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Log out the current user",
        "responses": {
          "204": {
            "description": "Logged out successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "tags": ["Users"],
        "summary": "Refresh access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string"
                  }
                },
                "required": ["refresh_token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "JWT used for authenticated requests"
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "Token used to obtain a new access token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/users/password-reset/request": {
      "post": {
        "tags": ["Users"],
        "summary": "Request password reset link",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequestRequest"
              },
              "examples": {
                "PasswordResetRequestRequest": {
                  "$ref": "#/components/examples/PasswordResetRequestRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset link sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetRequestResponse"
                },
                "examples": {
                  "PasswordResetRequestResponse": {
                    "$ref": "#/components/examples/PasswordResetRequestResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/users/password-reset/confirm": {
      "post": {
        "tags": ["Users"],
        "summary": "Confirm password reset with token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              },
              "examples": {
                "PasswordResetConfirmRequest": {
                  "$ref": "#/components/examples/PasswordResetConfirmRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetConfirmResponse"
                },
                "examples": {
                  "PasswordResetConfirmResponse": {
                    "$ref": "#/components/examples/PasswordResetConfirmResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user profile",
        "responses": {
          "200": {
            "description": "Profile info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "UserResponse": {
                    "$ref": "#/components/examples/UserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              },
              "examples": {
                "UpdateUserRequest": {
                  "$ref": "#/components/examples/UpdateUserRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "UserResponse": {
                    "$ref": "#/components/examples/UserResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/goals": {
      "get": {
        "tags": ["Goals"],
        "summary": "List all user goals",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List all user goals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GoalResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "post": {
        "tags": ["Goals"],
        "summary": "Create a goal",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGoalRequestForm"
              },
              "examples": {
                "CreateGoalRequestForm": {
                  "$ref": "#/components/examples/CreateGoalRequestForm"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/goals/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "get": {
        "tags": ["Goals"],
        "summary": "Get goal by ID",
        "responses": {
          "200": {
            "description": "Goal details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      },
      "patch": {
        "tags": ["Goals"],
        "summary": "Update goal title/description",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGoalRequestForm"
              },
              "examples": {
                "UpdateGoalRequestForm": {
                  "$ref": "#/components/examples/UpdateGoalRequestForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      },
      "delete": {
        "tags": ["Goals"],
        "summary": "Delete or archive goal",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    },
    "/goals/{id}/field-values": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "patch": {
        "tags": ["Goals"],
        "summary": "Update field values for a goal",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGoalFieldValuesRequest"
              },
              "examples": {
                "UpdateGoalFieldValuesRequestForm": {
                  "$ref": "#/components/examples/UpdateGoalFieldValuesRequestForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Values updated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/goal-board-images": {
      "get": {
        "tags": ["Goals"],
        "summary": "Get goal board images",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Image list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GoalBoardImageResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "post": {
        "tags": ["Goals"],
        "summary": "Upload image to goal board list",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GoalBoardImagesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Uploaded and resized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalBoardImageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/goal-board-images/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "delete": {
        "tags": ["Goals"],
        "summary": "Delete Goal Board image",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    },
    "/goal-types": {
      "get": {
        "tags": ["GoalTypes"],
        "summary": "List available goal types",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GoalTypeResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "GoalTypesResponse": {
                    "$ref": "#/components/examples/GoalTypesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "post": {
        "tags": ["GoalTypes"],
        "summary": "Create new goal type (admin)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGoalTypeForm"
              },
              "examples": {
                "GoalTypeRequestForm": {
                  "$ref": "#/components/examples/CreateGoalTypeRequestForm"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalTypeDetailedResponse"
                },
                "examples": {
                  "GoalTypeResponse": {
                    "$ref": "#/components/examples/GoalTypeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/goal-types/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "get": {
        "tags": ["GoalTypes"],
        "summary": "Get detailed goal type with goal type fields",
        "responses": {
          "200": {
            "description": "Goal type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalTypeDetailedResponse"
                },
                "examples": {
                  "GoalTypeResponse": {
                    "$ref": "#/components/examples/GoalTypeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "patch": {
        "tags": ["GoalTypes"],
        "summary": "Update goal type (admin)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGoalTypeForm"
              },
              "examples": {
                "GoalTypeRequestForm": {
                  "$ref": "#/components/examples/UpdateGoalTypeRequestForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalTypeDetailedResponse"
                },
                "examples": {
                  "GoalTypeResponse": {
                    "$ref": "#/components/examples/GoalTypeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      },
      "delete": {
        "tags": ["GoalTypes"],
        "summary": "Delete or archive goal type",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    },
    "/goal-types/{id}/fields": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "post": {
        "tags": ["GoalTypes"],
        "summary": "Add fields to goal type",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GoalTypeFieldForm"
                }
              },
              "examples": {
                "AddGoalTypeFieldsRequestForm": {
                  "$ref": "#/components/examples/AddGoalTypeFieldsRequestForm"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Field added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGoalTypeFieldsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/goals/{id}/progress": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "get": {
        "tags": ["GoalProgress"],
        "summary": "Get goal progress",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Progress list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GoalProgressResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "GoalProgressListResponse": {
                    "$ref": "#/components/examples/GoalProgressListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "post": {
        "tags": ["GoalProgress"],
        "summary": "Add progress",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGoalProgressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoalProgressResponse"
                },
                "examples": {
                  "GoalProgressResponse": {
                    "$ref": "#/components/examples/GoalProgressResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/daily-quests": {
      "get": {
        "tags": ["DailyQuests"],
        "summary": "Get all daily quests",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DailyQuestResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "DailyQuestListResponse": {
                    "$ref": "#/components/examples/DailyQuestListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "post": {
        "tags": ["DailyQuests"],
        "summary": "Create a daily quest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDailyQuestForm"
              },
              "examples": {
                "CreateDailyQuestForm": {
                  "$ref": "#/components/examples/CreateDailyQuestForm"
                },
                "CreateDailyQuestFormWithSelectedDays": {
                  "$ref": "#/components/examples/CreateDailyQuestFormWithSelectedDays"
                }
              }
            }
          },
          "description": "Add `goal_id` only if you need to link this daily quest with the Goal, leave null if not. Make sure to add `suggestion_id` to create a daily quest from suggestions, leave null if not."
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyQuestResponse"
                },
                "examples": {
                  "DailyQuestResponse": {
                    "$ref": "#/components/examples/DailyQuestResponse"
                  },
                  "DailyQuestResponseWithSelectedDays": {
                    "$ref": "#/components/examples/DailyQuestResponseWithSelectedDays"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/daily-quests/for-date": {
      "get": {
        "tags": ["DailyQuests"],
        "summary": "Get quests for a given date",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "description": "The exact date if the user device to fetch quests for. Format: YYYY-MM-DD. Example: 2025-04-23",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-04-23"
            }
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List for date",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DailyQuestResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "DailyQuestListResponse": {
                    "$ref": "#/components/examples/DailyQuestWithCompletedListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    },
    "/daily-quests/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "get": {
        "tags": ["DailyQuests"],
        "summary": "Get daily quest",
        "responses": {
          "200": {
            "description": "Daily quest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyQuestResponse"
                },
                "examples": {
                  "DailyQuestForm": {
                    "$ref": "#/components/examples/DailyQuestResponse"
                  },
                  "DailyQuestFormWithSelectedDays": {
                    "$ref": "#/components/examples/DailyQuestResponseWithSelectedDays"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "patch": {
        "tags": ["DailyQuests"],
        "summary": "Update daily quest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDailyQuestForm"
              },
              "examples": {
                "UpdateDailyQuestForm": {
                  "$ref": "#/components/examples/UpdateDailyQuestForm"
                },
                "UpdateDailyQuestFormWithSelectedDays": {
                  "$ref": "#/components/examples/UpdateDailyQuestFormWithSelectedDays"
                }
              }
            }
          },
          "description": "Add `goal_id` only if you need to link this daily quest with the Goal, leave null if not. Make sure to add `suggestion_id` to create a daily quest from suggestions, leave null if not."
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyQuestResponse"
                },
                "examples": {
                  "DailyQuestForm": {
                    "$ref": "#/components/examples/DailyQuestResponse"
                  },
                  "DailyQuestFormWithSelectedDays": {
                    "$ref": "#/components/examples/DailyQuestResponseWithSelectedDays"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      },
      "delete": {
        "tags": ["DailyQuests"],
        "summary": "Delete daily quest",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    },
    "/daily-quests/{id}/toggle": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "post": {
        "tags": ["DailyQuests"],
        "summary": "Toggle daily quest completion for date",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-04-23"
                  }
                }
              }
            }
          },
          "description": "The exact date to toggle daily quest completion on. Format: YYYY-MM-DD. Example: 2025-04-23"
        },
        "responses": {
          "200": {
            "description": "Toggled"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/daily-quests/suggestions": {
      "get": {
        "tags": ["DailyQuestsSuggestions"],
        "summary": "List daily quests suggestions excluding active daily quests for current user",
        "parameters": [
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/sortParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DailyQuestSuggestionResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "DailyQuestListResponse": {
                    "$ref": "#/components/examples/DailyQuestSuggestionListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "post": {
        "tags": ["DailyQuestsSuggestions"],
        "summary": "Create new daily quests suggestion (admin)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyQuestSuggestionForm"
              },
              "examples": {
                "DailyQuestSuggestionForm": {
                  "$ref": "#/components/examples/DailyQuestSuggestionForm"
                },
                "DailyQuestSuggestionFormWithSelectedDays": {
                  "$ref": "#/components/examples/DailyQuestSuggestionFormWithSelectedDays"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyQuestSuggestionResponse"
                },
                "examples": {
                  "DailyQuestsSuggestionResponse": {
                    "$ref": "#/components/examples/DailyQuestsSuggestionResponse"
                  },
                  "DailyQuestsSuggestionResponseWithSelectedDays": {
                    "$ref": "#/components/examples/DailyQuestsSuggestionResponseWithSelectedDays"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      }
    },
    "/daily-quests/suggestions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idParam"
        }
      ],
      "get": {
        "tags": ["DailyQuestsSuggestions"],
        "summary": "Get daily quests suggestion by ID",
        "responses": {
          "200": {
            "description": "Daily quests suggestion details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyQuestSuggestionResponse"
                },
                "examples": {
                  "DailyQuestsSuggestionResponse": {
                    "$ref": "#/components/examples/DailyQuestsSuggestionResponse"
                  },
                  "DailyQuestsSuggestionResponseWithSelectedDays": {
                    "$ref": "#/components/examples/DailyQuestsSuggestionResponseWithSelectedDays"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      },
      "patch": {
        "tags": ["DailyQuestsSuggestions"],
        "summary": "Update daily quests suggestion (admin)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyQuestSuggestionForm"
              },
              "examples": {
                "DailyQuestSuggestionForm": {
                  "$ref": "#/components/examples/DailyQuestSuggestionForm"
                },
                "DailyQuestSuggestionFormWithSelectedDays": {
                  "$ref": "#/components/examples/DailyQuestSuggestionFormWithSelectedDays"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyQuestSuggestionResponse"
                },
                "examples": {
                  "DailyQuestsSuggestionResponse": {
                    "$ref": "#/components/examples/DailyQuestsSuggestionResponse"
                  },
                  "DailyQuestsSuggestionResponseWithSelectedDays": {
                    "$ref": "#/components/examples/DailyQuestsSuggestionResponseWithSelectedDays"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          }
        }
      },
      "delete": {
        "tags": ["DailyQuestsSuggestions"],
        "summary": "Delete daily quests suggestion (admin)",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "417": {
            "$ref": "#/components/responses/ExpectationFailed"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "RegisterUserRequest": {
        "type": "object",
        "required": ["email", "password", "password_confirmation", "name"],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "minimum": 8,
            "maximum": 64
          },
          "password_confirmation": {
            "type": "string"
          },
          "name": {
            "minimum": 3,
            "type": "string"
          }
        }
      },
      "RegisterUserResponse": {
        "type": "object",
        "required": ["user", "access_token", "refresh_token"],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "access_token": {
            "type": "string",
            "description": "JWT used for authenticated requests"
          },
          "refresh_token": {
            "type": "string",
            "description": "Token used to obtain a new access token"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": ["user", "access_token", "refresh_token"],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT used for authenticated requests"
          },
          "refresh_token": {
            "type": "string",
            "description": "Token used to obtain a new access token"
          }
        }
      },
      "GoogleLoginRequest": {
        "type": "object",
        "required": ["token"],
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "PasswordResetRequestRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "PasswordResetRequestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "PasswordResetConfirmRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "token": {
            "type": "string"
          },
          "new_password": {
            "type": "string"
          },
          "new_password_confirmation": {
            "type": "string"
          }
        }
      },
      "PasswordResetConfirmResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GoalResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "description": {
            "type": "string",
            "minimum": 3,
            "maximum": 1024
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "goal_field_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoalFieldValueResponse"
            }
          }
        }
      },
      "CreateGoalRequestForm": {
        "type": "object",
        "required": [
          "name",
          "description",
          "goal_type_id",
          "goal_field_values"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "description": {
            "type": "string",
            "minimum": 3,
            "maximum": 1024
          },
          "goal_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_field_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoalFieldValue"
            }
          }
        }
      },
      "UpdateGoalRequestForm": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "name": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "description": {
            "type": "string",
            "minimum": 3,
            "maximum": 1024
          }
        }
      },
      "GoalFieldValue": {
        "type": "object",
        "properties": {
          "goal_type_field_id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "GoalFieldValueResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_type_field_id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "UpdateGoalFieldValuesRequest": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GoalFieldValue"
        }
      },
      "GoalBoardImageResponse": {
        "type": "object",
        "properties": {
          "file_url": {
            "type": "string",
            "format": "uri"
          },
          "thumbnail_url": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GoalBoardImagesRequest": {
        "type": "object",
        "required": ["image"],
        "properties": {
          "image": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "GoalTypeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "GoalTypeDetailedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "goal_type_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoalTypeFieldResponse"
            }
          }
        }
      },
      "CreateGoalTypeForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "goal_type_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoalTypeFieldForm"
            }
          }
        }
      },
      "UpdateGoalTypeForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "GoalTypeFieldForm": {
        "type": "object",
        "required": ["field_name", "field_type", "required"],
        "properties": {
          "field_name": {
            "type": "string"
          },
          "field_type": {
            "type": "string",
            "enum": ["string", "integer", "boolean", "dropdown"]
          },
          "required": {
            "type": "boolean"
          },
          "trackable": {
            "type": "boolean"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateGoalTypeFieldsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GoalTypeFieldResponse"
        }
      },
      "GoalTypeFieldResponse": {
        "type": "object",
        "required": ["field_name", "field_type", "required"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "field_name": {
            "type": "string"
          },
          "field_type": {
            "type": "string",
            "enum": ["string", "integer", "boolean", "dropdown"]
          },
          "required": {
            "type": "boolean"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trackable": {
            "type": "boolean"
          }
        }
      },
      "CreateGoalProgressRequest": {
        "type": "object",
        "required": ["goal_type_field_id", "progress_value"],
        "properties": {
          "goal_type_field_id": {
            "type": "string",
            "format": "uuid"
          },
          "progress_value": {
            "type": "integer"
          }
        }
      },
      "GoalProgressResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_type_field_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "progress_value": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateDailyQuestForm": {
        "type": "object",
        "required": ["title", "icon", "frequency"],
        "properties": {
          "goal_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "suggestion_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Must be added to create a daily quest from suggestions"
          },
          "title": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "icon": {
            "type": "string",
            "minimum": 1,
            "maximum": 64
          },
          "frequency": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Daily",
                "Mondays",
                "Tuesdays",
                "Wednesdays",
                "Thursdays",
                "Fridays",
                "Saturdays",
                "Sundays"
              ],
              "description": "Frequency of the daily quest repetition. Frequency must be either 'Daily' or at least one weekday, but not both."
            }
          }
        }
      },
      "UpdateDailyQuestForm": {
        "type": "object",
        "required": ["title", "icon", "frequency"],
        "properties": {
          "title": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "icon": {
            "type": "string",
            "minimum": 1,
            "maximum": 64
          },
          "frequency": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Daily",
                "Mondays",
                "Tuesdays",
                "Wednesdays",
                "Thursdays",
                "Fridays",
                "Saturdays",
                "Sundays"
              ],
              "description": "Frequency of the daily quest repetition. Frequency must be either 'Daily' or at least one weekday, but not both."
            }
          }
        }
      },
      "DailyQuestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "suggestion_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 256
          },
          "icon": {
            "type": "string",
            "minLength": 3,
            "maxLength": 256
          },
          "frequency": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Daily",
                "Mondays",
                "Tuesdays",
                "Wednesdays",
                "Thursdays",
                "Fridays",
                "Saturdays",
                "Sundays"
              ],
              "description": "Frequency of the daily quest repetition"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DailyQuestWithCompletedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "goal_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "suggestion_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 256
          },
          "icon": {
            "type": "string",
            "minLength": 3,
            "maxLength": 256
          },
          "frequency": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Daily",
                "Mondays",
                "Tuesdays",
                "Wednesdays",
                "Thursdays",
                "Fridays",
                "Saturdays",
                "Sundays"
              ],
              "description": "Frequency of the daily quest repetition"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed": {
            "type": "boolean"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DailyQuestSuggestionForm": {
        "type": "object",
        "required": ["title", "icon"],
        "properties": {
          "title": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "icon": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          }
        }
      },
      "DailyQuestSuggestionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "title": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "icon": {
            "type": "string",
            "minimum": 3,
            "maximum": 256
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["code", "message"]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": ["code", "message", "errors"]
      }
    },
    "examples": {
      "RegisterUserRequest": {
        "summary": "An example of Register User request",
        "value": {
          "email": "example@gmail.com",
          "password": "23j2jn&*&bUHUwq",
          "password_confirmation": "23j2jn&*&bUHUwq",
          "name": "John Dou"
        }
      },
      "RegisterUserResponse": {
        "summary": "An example of Register User response",
        "value": {
          "user": {
            "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
            "email": "example@gmail.com",
            "name": "John Dou",
            "created_at": "2019-08-24T14:15:22Z"
          },
          "access_token": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "refresh_token": "87b11604-f554-47f8-9334-39a0d4849ab3"
        }
      },
      "UserResponse": {
        "summary": "An example of New User response",
        "value": {
          "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "email": "example@gmail.com",
          "name": "John Dou",
          "created_at": "2019-08-24T14:15:22Z"
        }
      },
      "LoginUserRequest": {
        "summary": "An example of New User request",
        "value": {
          "email": "example@gmail.com",
          "password": "23j2jn&*&bUHUwq"
        }
      },
      "LoginUserResponse": {
        "summary": "An example of New User response",
        "value": {
          "access_token": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "refresh_token": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "user": {
            "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
            "email": "example@gmail.com",
            "name": "John Dou",
            "created_at": "2019-08-24T14:15:22Z"
          }
        }
      },
      "GoogleLoginRequest": {
        "summary": "An example of Google Login request",
        "value": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        }
      },
      "PasswordResetRequestRequest": {
        "summary": "An example of Password Reset request",
        "value": {
          "email": "example@gmail.com"
        }
      },
      "PasswordResetRequestResponse": {
        "summary": "An example of Password Reset response",
        "value": {
          "success": true
        }
      },
      "PasswordResetConfirmRequest": {
        "summary": "An example of Password Confirm request",
        "value": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
          "new_password": "23j2jn&*&bUHUwq",
          "new_password_confirmation": "23j2jn&*&bUHUwq"
        }
      },
      "PasswordResetConfirmResponse": {
        "summary": "An example of Password Confirm response",
        "value": {
          "success": true
        }
      },
      "UpdateUserRequest": {
        "summary": "An example of Update User request",
        "value": {
          "email": "example@gmail.com",
          "name": "John Dou"
        }
      },
      "GoalResponse": {
        "summary": "An example of Goal response",
        "value": {
          "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "name": "Read more books",
          "description": "Read more books during this year",
          "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "goal_type_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "created_at": "2019-08-24T14:15:22Z",
          "updated_at": "2019-08-24T14:15:22Z",
          "goal_field_values": [
            {
              "goal_type_field_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "value": "10"
            },
            {
              "goal_type_field_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "value": "Every day"
            }
          ]
        }
      },
      "CreateGoalRequestForm": {
        "summary": "An example of Create Goal request",
        "value": {
          "name": "Read more books",
          "description": "Read more books during this year",
          "goal_type_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "goal_field_values": [
            {
              "goal_type_field_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "value": "10"
            },
            {
              "goal_type_field_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "value": "Every day"
            }
          ]
        }
      },
      "UpdateGoalRequestForm": {
        "summary": "An example of Update Goal request",
        "value": {
          "name": "Read more books",
          "description": "Read more books during this year"
        }
      },
      "UpdateGoalFieldValuesRequestForm": {
        "summary": "An example of Update Goal Field Values request",
        "value": [
          {
            "goal_type_field_id": "318457ab-ffae-4b45-8c7a-118df6692e83",
            "value": "36"
          },
          {
            "goal_type_field_id": "23c9531b-753c-42f5-bbd5-e017dd95ce78",
            "value": "false"
          }
        ]
      },
      "CreateGoalTypeRequestForm": {
        "summary": "An example of Create Goal Type request",
        "value": {
          "name": "Journal",
          "description": "Capture your thoughts and feelings to gain clarity and insight.",
          "goal_type_fields": [
            {
              "id": "c7b0cc70-9755-47a4-8137-280f0d24380b",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "What did you reflect on today?",
              "field_type": "string",
              "required": false,
              "options": null,
              "trackable": false
            },
            {
              "id": "147bb1f8-ffe4-4faa-9c82-effab5a65375",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "What are you grateful for?",
              "field_type": "string",
              "required": false,
              "options": null,
              "trackable": false
            }
          ]
        }
      },
      "GoalTypesResponse": {
        "summary": "An example of Goal Types response",
        "value": {
          "data": [
            {
              "id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "name": "Journal",
              "description": "Capture your thoughts and feelings to gain clarity and insight.TESTS"
            },
            {
              "id": "6d0d9210-03f6-4edf-a022-0429d040fef2",
              "name": "Study",
              "description": "Study more effectively to invest time in learning and unlock new opportunities."
            },
            {
              "id": "6da2a1f3-20f4-4656-bb5b-47fa1903ac22",
              "name": "Read more books",
              "description": "Trade mindless scrolling on social media for the enjoyment of immersing yourself in the pages of a great book."
            },
            {
              "id": "8be37f41-4c48-4fe9-9dd4-03b2c1eea6fd",
              "name": "Create Custom Goal",
              "description": "Enter a custom resolution and set your own goals to achieve it!"
            },
            {
              "id": "b5c14cf4-f836-43e0-84a4-5af9118bc1b9",
              "name": "Sleep more",
              "description": "Get more rest to wake up refreshed and ready to have a better day!"
            },
            {
              "id": "d776e95c-26d3-4145-a5b7-14eea2dd71d3",
              "name": "Lose Weight",
              "description": "Focus on healthy eating and regular exercise to achieve your weight loss goals."
            }
          ]
        }
      },
      "GoalTypeResponse": {
        "summary": "An example of Goal Type response",
        "value": {
          "id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
          "name": "Journal",
          "description": "Capture your thoughts and feelings to gain clarity and insight.TESTS",
          "goal_type_fields": [
            {
              "id": "c7b0cc70-9755-47a4-8137-280f0d24380b",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "What did you reflect on today?",
              "field_type": "string",
              "required": false,
              "options": null,
              "trackable": false
            },
            {
              "id": "147bb1f8-ffe4-4faa-9c82-effab5a65375",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "What are you grateful for?",
              "field_type": "string",
              "required": false,
              "options": null,
              "trackable": false
            },
            {
              "id": "318457ab-ffae-4b45-8c7a-118df6692e83",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "Mood rating (1-10)",
              "field_type": "integer",
              "required": false,
              "options": null,
              "trackable": true
            },
            {
              "id": "23c9531b-753c-42f5-bbd5-e017dd95ce78",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "Did journaling help today?",
              "field_type": "boolean",
              "required": false,
              "options": null,
              "trackable": true
            },
            {
              "id": "5f4825ae-189c-46e0-a740-e039a512bea7",
              "goal_type_id": "59dd0a92-3731-402b-b1a5-a3dc9c7c0d1b",
              "field_name": "Journal method",
              "field_type": "dropdown",
              "required": false,
              "options": ["Typed", "Handwritten", "Voice Notes"],
              "trackable": false
            }
          ]
        }
      },
      "UpdateGoalTypeRequestForm": {
        "summary": "An example of Update Goal Type request",
        "value": {
          "name": "Journal",
          "description": "Capture your thoughts and feelings to gain clarity and insight."
        }
      },
      "AddGoalTypeFieldsRequestForm": {
        "summary": "An example of Add Goal Type Fields request",
        "value": [
          {
            "field_name": "What did you reflect on today?",
            "field_type": "string",
            "required": false,
            "trackable": false,
            "options": null
          },
          {
            "field_name": "What are you grateful for?",
            "field_type": "integer",
            "required": true,
            "trackable": true,
            "options": null
          },
          {
            "field_name": "Journal method",
            "field_type": "dropdown",
            "required": false,
            "trackable": false,
            "options": ["Typed", "Handwritten", "Voice Notes"]
          }
        ]
      },
      "GoalProgressListResponse": {
        "summary": "An example of Goal Progress list response",
        "value": {
          "data": [
            {
              "id": "5528e6dd-1894-4a25-aebf-a2cd64f0d771",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_type_field_id": "d2445a0d-9c74-4858-b330-08aa7d235fe7",
              "user_id": "1c84f82a-203c-4e64-b1e9-2d0f43ae7fe8",
              "progress_value": 9,
              "created_at": "2025-04-15T23:42:47.121Z"
            },
            {
              "id": "6f8f5141-dbea-41d9-9544-4714486fa200",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_type_field_id": "e6c1bc7e-6430-452f-ad8f-da1f3dbe00c2",
              "user_id": "1c84f82a-203c-4e64-b1e9-2d0f43ae7fe8",
              "progress_value": 6,
              "created_at": "2025-04-19T23:42:46.798Z"
            },
            {
              "id": "7b3bce88-6683-4b9d-85c3-d8732b04d209",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_type_field_id": "e6c1bc7e-6430-452f-ad8f-da1f3dbe00c2",
              "user_id": "1c84f82a-203c-4e64-b1e9-2d0f43ae7fe8",
              "progress_value": 5,
              "created_at": "2025-04-12T23:42:46.798Z"
            },
            {
              "id": "fe2fc0df-d08a-4b78-91ef-d90921f809d5",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_type_field_id": "d2445a0d-9c74-4858-b330-08aa7d235fe7",
              "user_id": "1c84f82a-203c-4e64-b1e9-2d0f43ae7fe8",
              "progress_value": 8,
              "created_at": "2025-04-18T23:42:47.121Z"
            }
          ]
        }
      },
      "GoalProgressResponse": {
        "summary": "An example of Goal Type response",
        "value": {
          "id": "5528e6dd-1894-4a25-aebf-a2cd64f0d771",
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "goal_type_field_id": "d2445a0d-9c74-4858-b330-08aa7d235fe7",
          "user_id": "1c84f82a-203c-4e64-b1e9-2d0f43ae7fe8",
          "progress_value": 9,
          "created_at": "2025-04-15T23:42:47.121Z"
        }
      },
      "DailyQuestListResponse": {
        "summary": "An example of Daily Quest list with one daily and one weekday quest",
        "value": {
          "data": [
            {
              "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "title": "Drink 2L of water",
              "icon": "\uD83D\uDCA7",
              "frequency": ["Daily"],
              "created_at": "2025-04-23T20:28:28.425Z",
              "updated_at": "2025-04-23T20:28:28.425Z"
            },
            {
              "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "title": "Read 50 pages",
              "icon": "\uD83D\uDCD6",
              "frequency": ["Mondays", "Wednesdays", "Fridays"],
              "created_at": "2025-04-23T20:28:28.425Z",
              "updated_at": "2025-04-23T20:28:28.425Z"
            }
          ]
        }
      },
      "DailyQuestWithCompletedListResponse": {
        "summary": "An example of Daily Quest list with completed data one daily and one weekday quest",
        "value": {
          "data": [
            {
              "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "title": "Drink 2L of water",
              "icon": "\uD83D\uDCA7",
              "frequency": ["Daily"],
              "created_at": "2025-04-23T20:28:28.425Z",
              "updated_at": "2025-04-23T20:28:28.425Z",
              "completed": true,
              "completed_at": "2025-04-23T23:43:29.069Z"
            },
            {
              "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "title": "Read 50 pages",
              "icon": "\uD83D\uDCD6",
              "frequency": ["Mondays", "Wednesdays", "Fridays"],
              "created_at": "2025-04-23T20:28:28.425Z",
              "updated_at": "2025-04-23T20:28:28.425Z",
              "completed": false,
              "completed_at": null
            }
          ]
        }
      },
      "CreateDailyQuestForm": {
        "summary": "An example of create Daily Quest with daily frequency",
        "value": {
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Drink 2L of water",
          "icon": "\uD83D\uDCA7",
          "frequency": ["Daily"]
        }
      },
      "CreateDailyQuestFormWithSelectedDays": {
        "summary": "An example of create Daily Quest with different days frequency",
        "value": {
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Read 50 pages",
          "icon": "\uD83D\uDCD6",
          "frequency": ["Mondays", "Wednesdays", "Fridays"]
        }
      },
      "UpdateDailyQuestForm": {
        "summary": "An example of Update Daily Quest with daily frequency",
        "value": {
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Drink 2L of water",
          "icon": "\uD83D\uDCA7",
          "frequency": ["Daily"]
        }
      },
      "UpdateDailyQuestFormWithSelectedDays": {
        "summary": "An example of Update Daily Quest with different days frequency",
        "value": {
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Read 50 pages",
          "icon": "\uD83D\uDCD6",
          "frequency": ["Mondays", "Wednesdays", "Fridays"]
        }
      },
      "DailyQuestResponse": {
        "summary": "An example of Daily Quest with daily frequency",
        "value": {
          "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Drink 2L of water",
          "icon": "\uD83D\uDCA7",
          "frequency": ["Daily"],
          "created_at": "2025-04-23T20:28:28.425Z",
          "updated_at": "2025-04-23T20:28:28.425Z"
        }
      },
      "DailyQuestResponseWithSelectedDays": {
        "summary": "An example of Daily Quest with different days frequency",
        "value": {
          "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "user_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "goal_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "suggestion_id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Read 50 pages",
          "icon": "\uD83D\uDCD6",
          "frequency": ["Mondays", "Wednesdays", "Fridays"],
          "created_at": "2025-04-23T20:28:28.425Z",
          "updated_at": "2025-04-23T20:28:28.425Z"
        }
      },
      "DailyQuestSuggestionForm": {
        "summary": "An example of Daily Quest with daily frequency",
        "value": {
          "title": "Drink 2L of water",
          "icon": "\uD83D\uDCA7"
        }
      },
      "DailyQuestSuggestionFormWithSelectedDays": {
        "summary": "An example of Daily Quest with different days frequency",
        "value": {
          "title": "Read 50 pages",
          "icon": "\uD83D\uDCD6"
        }
      },
      "DailyQuestsSuggestionResponse": {
        "summary": "An example of Daily Quest Suggestion with daily frequency",
        "value": {
          "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Drink 2L of water",
          "icon": "\uD83D\uDCA7",
          "created_at": "2025-04-23T20:28:28.425Z",
          "updated_at": "2025-04-23T20:28:28.425Z"
        }
      },
      "DailyQuestsSuggestionResponseWithSelectedDays": {
        "summary": "An example of Daily Quest Suggestion with different days frequency",
        "value": {
          "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
          "title": "Read 50 pages",
          "icon": "\uD83D\uDCD6",
          "created_at": "2025-04-23T20:28:28.425Z",
          "updated_at": "2025-04-23T20:28:28.425Z"
        }
      },
      "DailyQuestSuggestionListResponse": {
        "summary": "An example of Daily Quest Suggestion list with one daily and one weekday quest",
        "value": {
          "data": [
            {
              "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "title": "Drink 2L of water",
              "icon": "\uD83D\uDCA7",
              "created_at": "2025-04-23T20:28:28.425Z",
              "updated_at": "2025-04-23T20:28:28.425Z"
            },
            {
              "id": "87b11604-f554-47f8-9334-39a0d4849ab3",
              "title": "Read 50 pages",
              "icon": "\uD83D\uDCD6",
              "created_at": "2025-04-23T20:28:28.425Z",
              "updated_at": "2025-04-23T20:28:28.425Z"
            }
          ]
        }
      },
      "BadRequestResponse": {
        "summary": "An example of BadRequest response",
        "value": {
          "code": "400",
          "message": "Invalid request format. 'email' field is required."
        }
      },
      "UnauthorizedResponse": {
        "summary": "An example of Unauthorized response",
        "value": {
          "code": "401",
          "message": "Authentication required. Please provide a valid API token."
        }
      },
      "ForbiddenResponse": {
        "summary": "An example of Forbidden response",
        "value": {
          "code": "403",
          "message": "Access denied. You do not have permission to access this resource."
        }
      },
      "NotFoundResponse": {
        "summary": "An example of NotFound response",
        "value": {
          "code": "404",
          "message": "The requested resource was not found."
        }
      },
      "ExpectationFailedResponse": {
        "summary": "An example of ExpectationFailed response",
        "value": {
          "code": "417",
          "message": "Request expectations could not be fulfilled. Please check your headers."
        }
      },
      "UnprocessableEntityResponse": {
        "summary": "An example of UnprocessableEntity response",
        "value": {
          "code": "422",
          "message": "Validation failed.",
          "errors": [
            {
              "field": "password",
              "message": "'password' must be at least 8 symbols long."
            },
            {
              "field": "price",
              "message": "'price' must be a positive number."
            }
          ]
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The server cannot process the request due to a client error (e.g., malformed request syntax)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "BadRequestResponse": {
                "$ref": "#/components/examples/BadRequestResponse"
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "The request requires user authentication",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "UnauthorizedResponse": {
                "$ref": "#/components/examples/UnauthorizedResponse"
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "You don't have permissions to access this action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ForbiddenResponse": {
                "$ref": "#/components/examples/ForbiddenResponse"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "NotFoundResponse": {
                "$ref": "#/components/examples/NotFoundResponse"
              }
            }
          }
        }
      },
      "ExpectationFailed": {
        "description": "No required headers",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ExpectationFailedResponse": {
                "$ref": "#/components/examples/ExpectationFailedResponse"
              }
            }
          }
        }
      },
      "UnprocessableContent": {
        "description": "The request was well-formed but was unable to be followed due to semantic (validation) errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "examples": {
              "UnprocessableEntityResponse": {
                "$ref": "#/components/examples/UnprocessableEntityResponse"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "sortParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string",
          "default": "id"
        },
        "examples": {
          "By Id ASC": {
            "summary": "Sort by Id ASC",
            "value": "id"
          },
          "By Name DESC": {
            "summary": "Sort by Name DESC",
            "value": "-name"
          }
        },
        "description": "The way to sort by field and direction. Add a '-' sign at the beginning of the field name to sort DESC"
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "default": 10
        },
        "description": "The numbers of items to return",
        "example": 10
      },
      "idParam": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The ID of resource",
        "example": "87b11604-f554-47f8-9334-39a0d4849ab3"
      }
    }
  }
}
