model DailyQuest {
  id            String      @id @default(uuid())
  user_id       String
  goal_id       String?
  suggestion_id String?
  title         String
  icon          String
  is_daily      Boolean
  frequency     Frequency[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  user        User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  goal        Goal?                  @relation(fields: [goal_id], references: [id])
  suggestion DailyQuestSuggestion? @relation(fields: [suggestion_id], references: [id])
  completions DailyQuestCompletion[]

  @@map("daily_quest")
}

model DailyQuestCompletion {
  id             String   @id @default(uuid())
  daily_quest_id String
  user_id        String
  date           DateTime @db.Date // Only the date part (no time)
  completed_at   DateTime

  daily_quest DailyQuest @relation(fields: [daily_quest_id], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([daily_quest_id, user_id, date]) // To prevent double-completion per day
  @@map("daily_quest_completion")
}

model DailyQuestSuggestion {
  id         String   @id @default(uuid())
  title      String
  icon       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  daily_quests DailyQuest[]

  @@map("daily_quest_suggestion")
}
